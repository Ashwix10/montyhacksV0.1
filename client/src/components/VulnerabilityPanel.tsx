import React from 'react';
import { Vulnerability } from '@/types/sandbox';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { AlertTriangle, Shield, AlertCircle, Info } from 'lucide-react';

interface VulnerabilityPanelProps {
  vulnerabilities: Vulnerability[];
  onVulnerabilityClick?: (vulnerability: Vulnerability) => void;
}

export function VulnerabilityPanel({ vulnerabilities, onVulnerabilityClick }: VulnerabilityPanelProps) {
  const getSeverityIcon = (severity: Vulnerability['severity']) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="w-3 h-3" />;
      case 'high':
        return <AlertCircle className="w-3 h-3" />;
      case 'medium':
        return <Shield className="w-3 h-3" />;
      case 'low':
        return <Info className="w-3 h-3" />;
    }
  };

  const getSeverityColor = (severity: Vulnerability['severity']) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800/50';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400 dark:border-orange-800/50';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400 dark:border-yellow-800/50';
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800/50';
    }
  };

  const getSeverityBadgeColor = (severity: Vulnerability['severity']) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-500 text-white';
      case 'high':
        return 'bg-orange-500 text-white';
      case 'medium':
        return 'bg-yellow-500 text-white';
      case 'low':
        return 'bg-blue-500 text-white';
    }
  };

  return (
    <Card className="glass-morphism border-0">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center justify-between text-lg">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="w-5 h-5 text-red-500" />
            <span>Vulnerabilities</span>
          </div>
          <Badge variant="secondary" className="text-xs">
            {vulnerabilities.length} issues
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="pt-0">
        <ScrollArea className="h-96">
          {vulnerabilities.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-8 text-center">
              <Shield className="w-12 h-12 text-green-500 mb-3" />
              <p className="text-sm text-muted-foreground">
                No vulnerabilities detected
              </p>
              <p className="text-xs text-muted-foreground mt-1">
                Your code looks secure!
              </p>
            </div>
          ) : (
            <div className="space-y-3">
              {vulnerabilities.map((vulnerability) => (
                <div
                  key={vulnerability.id}
                  className={`vulnerability-item p-3 rounded-lg border transition-all duration-200 cursor-pointer hover:shadow-md hover:transform hover:scale-[1.02] ${getSeverityColor(vulnerability.severity)}`}
                  onClick={() => onVulnerabilityClick?.(vulnerability)}
                >
                  <div className="flex items-start space-x-3">
                    <div className={`mt-1 ${getSeverityColor(vulnerability.severity).includes('red') ? 'text-red-500' : 
                      getSeverityColor(vulnerability.severity).includes('orange') ? 'text-orange-500' :
                      getSeverityColor(vulnerability.severity).includes('yellow') ? 'text-yellow-500' : 'text-blue-500'}`}>
                      {getSeverityIcon(vulnerability.severity)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between mb-1">
                        <h4 className="font-medium text-sm truncate">
                          {vulnerability.type}
                        </h4>
                        <div className="flex items-center space-x-2 flex-shrink-0">
                          <Badge 
                            className={`text-xs capitalize px-2 py-0.5 ${getSeverityBadgeColor(vulnerability.severity)}`}
                          >
                            {vulnerability.severity}
                          </Badge>
                          <span className="text-xs text-muted-foreground">
                            Line {vulnerability.line}
                          </span>
                        </div>
                      </div>
                      <p className="text-xs text-muted-foreground mb-2">
                        {vulnerability.message}
                      </p>
                      {vulnerability.description && (
                        <p className="text-xs text-muted-foreground/80">
                          {vulnerability.description}
                        </p>
                      )}
                      <div className="mt-2">
                        <span className="text-xs text-primary hover:text-primary/80">
                          Click to jump to line â†’
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
