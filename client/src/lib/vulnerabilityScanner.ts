import { Vulnerability, SupportedLanguage } from '@/types/sandbox';

interface VulnerabilityRule {
  id: string;
  pattern: RegExp;
  severity: Vulnerability['severity'];
  type: string;
  message: string;
  description?: string;
}

const pythonRules: VulnerabilityRule[] = [
  {
    id: 'python-eval',
    pattern: /\beval\s*\(/g,
    severity: 'critical',
    type: 'Code Injection',
    message: 'Use of eval() enables arbitrary code execution',
    description: 'The eval() function executes arbitrary code and poses a severe security risk'
  },
  {
    id: 'python-exec',
    pattern: /\bexec\s*\(/g,
    severity: 'critical',
    type: 'Code Injection',
    message: 'Use of exec() enables arbitrary code execution',
    description: 'The exec() function executes arbitrary code and poses a severe security risk'
  },
  {
    id: 'python-hardcoded-password',
    pattern: /(password|passwd|pwd)\s*=\s*["'][^"'\s]+["']/gi,
    severity: 'high',
    type: 'Hardcoded Credentials',
    message: 'Hardcoded password detected',
    description: 'Avoid storing passwords directly in source code'
  },
  {
    id: 'python-hardcoded-key',
    pattern: /(api_key|secret_key|private_key)\s*=\s*["'][^"'\s]+["']/gi,
    severity: 'high',
    type: 'Hardcoded Credentials',
    message: 'Hardcoded API key or secret detected',
    description: 'Use environment variables for sensitive credentials'
  },
  {
    id: 'python-os-system',
    pattern: /os\.system\s*\(/g,
    severity: 'high',
    type: 'Command Injection',
    message: 'Use of os.system() can lead to command injection',
    description: 'Use subprocess module with proper input validation instead'
  },
  {
    id: 'python-subprocess-shell',
    pattern: /subprocess\.\w+\([^)]*shell\s*=\s*True/g,
    severity: 'medium',
    type: 'Command Injection',
    message: 'Subprocess with shell=True can be dangerous',
    description: 'Avoid shell=True unless absolutely necessary'
  },
  {
    id: 'python-pickle-load',
    pattern: /pickle\.loads?\s*\(/g,
    severity: 'high',
    type: 'Deserialization',
    message: 'Pickle deserialization can execute arbitrary code',
    description: 'Use safer serialization formats like JSON'
  },
  {
    id: 'python-input-py2',
    pattern: /\binput\s*\(/g,
    severity: 'medium',
    type: 'Input Validation',
    message: 'Unvalidated input usage detected',
    description: 'Validate and sanitize user input before use'
  }
];

const javascriptRules: VulnerabilityRule[] = [
  {
    id: 'js-eval',
    pattern: /\beval\s*\(/g,
    severity: 'critical',
    type: 'Code Injection',
    message: 'Use of eval() enables arbitrary code execution',
    description: 'The eval() function executes arbitrary code and poses a severe security risk'
  },
  {
    id: 'js-function-constructor',
    pattern: /new\s+Function\s*\(/g,
    severity: 'critical',
    type: 'Code Injection',
    message: 'Function constructor can execute arbitrary code',
    description: 'Avoid using Function constructor with dynamic input'
  },
  {
    id: 'js-innerhtml',
    pattern: /\.innerHTML\s*=/g,
    severity: 'medium',
    type: 'XSS',
    message: 'innerHTML assignment can lead to XSS',
    description: 'Use textContent or properly sanitize HTML content'
  },
  {
    id: 'js-document-write',
    pattern: /document\.write\s*\(/g,
    severity: 'medium',
    type: 'XSS',
    message: 'document.write() can introduce XSS vulnerabilities',
    description: 'Use safer DOM manipulation methods'
  },
  {
    id: 'js-hardcoded-password',
    pattern: /(password|passwd|pwd)\s*[:=]\s*["'][^"'\s]+["']/gi,
    severity: 'high',
    type: 'Hardcoded Credentials',
    message: 'Hardcoded password detected',
    description: 'Avoid storing passwords directly in source code'
  },
  {
    id: 'js-hardcoded-key',
    pattern: /(api_key|secret_key|private_key|token)\s*[:=]\s*["'][^"'\s]+["']/gi,
    severity: 'high',
    type: 'Hardcoded Credentials',
    message: 'Hardcoded API key or secret detected',
    description: 'Use environment variables for sensitive credentials'
  }
];

const rulesByLanguage: Record<SupportedLanguage, VulnerabilityRule[]> = {
  python: pythonRules,
  javascript: [...javascriptRules],
  typescript: [...javascriptRules] // TypeScript uses same rules as JavaScript
};

export function scanCode(code: string, language: SupportedLanguage): Vulnerability[] {
  const rules = rulesByLanguage[language] || [];
  const vulnerabilities: Vulnerability[] = [];
  const lines = code.split('\n');

  rules.forEach(rule => {
    let match;
    rule.pattern.lastIndex = 0; // Reset regex state

    while ((match = rule.pattern.exec(code)) !== null) {
      // Calculate line number
      const beforeMatch = code.substring(0, match.index);
      const lineNumber = beforeMatch.split('\n').length;
      
      // Calculate column number
      const lineStart = beforeMatch.lastIndexOf('\n') + 1;
      const column = match.index - lineStart + 1;

      vulnerabilities.push({
        id: `${rule.id}-${lineNumber}-${column}`,
        line: lineNumber,
        column,
        type: rule.type,
        severity: rule.severity,
        message: rule.message,
        description: rule.description
      });

      // Prevent infinite loops with zero-width matches
      if (match[0].length === 0) {
        rule.pattern.lastIndex++;
      }
    }
  });

  return vulnerabilities.sort((a, b) => {
    const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
    return severityOrder[b.severity] - severityOrder[a.severity] || a.line - b.line;
  });
}

export function calculateSecurityScore(vulnerabilities: Vulnerability[]): number {
  if (vulnerabilities.length === 0) return 100;

  const weights = { critical: 25, high: 15, medium: 8, low: 3 };
  const totalDeduction = vulnerabilities.reduce((sum, vuln) => {
    return sum + weights[vuln.severity];
  }, 0);

  return Math.max(0, 100 - totalDeduction);
}
