import { useState, useCallback, useMemo } from 'react';
import { Vulnerability, SecurityScore, SupportedLanguage } from '@/types/sandbox';
import { scanCode, calculateSecurityScore } from '@/lib/vulnerabilityScanner';

export function useVulnerabilityScanner() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [lastScanTime, setLastScanTime] = useState<Date | null>(null);

  const scanCodeForVulnerabilities = useCallback(async (
    code: string,
    language: SupportedLanguage
  ): Promise<Vulnerability[]> => {
    setIsScanning(true);
    
    try {
      // Simulate scanning delay for UX
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const foundVulnerabilities = scanCode(code, language);
      setVulnerabilities(foundVulnerabilities);
      setLastScanTime(new Date());
      
      return foundVulnerabilities;
    } finally {
      setIsScanning(false);
    }
  }, []);

  const securityScore = useMemo((): SecurityScore => {
    const overallScore = calculateSecurityScore(vulnerabilities);
    const vulnerabilityCounts = vulnerabilities.reduce(
      (acc, vuln) => {
        acc[vuln.severity]++;
        return acc;
      },
      { critical: 0, high: 0, medium: 0, low: 0 }
    );

    // Calculate component scores
    const codeQuality = Math.max(20, 100 - vulnerabilities.length * 5);
    const security = overallScore;
    const performance = Math.max(70, 100 - vulnerabilities.filter(v => 
      v.type.includes('Performance') || v.type.includes('Memory')
    ).length * 10);

    // Calculate grade
    let grade = 'F';
    if (overallScore >= 90) grade = 'A+';
    else if (overallScore >= 85) grade = 'A';
    else if (overallScore >= 80) grade = 'A-';
    else if (overallScore >= 75) grade = 'B+';
    else if (overallScore >= 70) grade = 'B';
    else if (overallScore >= 65) grade = 'B-';
    else if (overallScore >= 60) grade = 'C+';
    else if (overallScore >= 55) grade = 'C';
    else if (overallScore >= 50) grade = 'C-';
    else if (overallScore >= 45) grade = 'D+';
    else if (overallScore >= 40) grade = 'D';

    return {
      overall: overallScore,
      codeQuality,
      security,
      performance,
      grade,
      vulnerabilities: vulnerabilityCounts
    };
  }, [vulnerabilities]);

  const reset = useCallback(() => {
    setVulnerabilities([]);
    setLastScanTime(null);
    setIsScanning(false);
  }, []);

  return {
    vulnerabilities,
    securityScore,
    isScanning,
    lastScanTime,
    scanCodeForVulnerabilities,
    reset
  };
}
